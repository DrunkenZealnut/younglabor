<?php
/**
 * 자동 생성된 게시판 시스템 설정 파일
 * 
 * 테이블 접두사: {table_prefix}
 * 생성일: {generation_date}
 */

// 오류 보고 설정 (개발환경에서만 활성화)
if (in_array($_SERVER['HTTP_HOST'], ['localhost', '127.0.0.1', 'localhost:8081'])) {
    error_reporting(E_ALL);
    ini_set('display_errors', 1);
    define('DEBUG_MODE', true);
} else {
    error_reporting(E_ERROR | E_WARNING);
    ini_set('display_errors', 0);
    define('DEBUG_MODE', false);
}

// 데이터베이스 연결 설정
// 실제 환경에 맞게 수정하세요
$db_config = [
    'host' => 'localhost',
    'dbname' => 'your_database',  // 데이터베이스명 수정 필요
    'username' => 'your_username',  // 사용자명 수정 필요
    'password' => 'your_password',  // 비밀번호 수정 필요
    'charset' => 'utf8mb4',
    'options' => [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
        PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8mb4"
    ]
];

try {
    $dsn = "mysql:host={$db_config['host']};dbname={$db_config['dbname']};charset={$db_config['charset']}";
    $pdo = new PDO($dsn, $db_config['username'], $db_config['password'], $db_config['options']);
    
    // 연결 테스트
    if (DEBUG_MODE) {
        $pdo->query("SELECT 1");
    }
    
} catch (PDOException $e) {
    if (DEBUG_MODE) {
        die("데이터베이스 연결 실패: " . $e->getMessage());
    } else {
        die("데이터베이스 연결에 문제가 발생했습니다. 관리자에게 문의하세요.");
    }
}

// 사이트 설정
define('SITE_NAME', '자동 생성 게시판 시스템');
define('SITE_DESCRIPTION', 'SQL 스키마로부터 자동 생성된 게시판');
define('SITE_VERSION', '1.0.0');
define('SITE_AUTHOR', 'Board Templates Generator');

// 보안 설정
define('CSRF_TOKEN_NAME', 'csrf_token');
define('SESSION_TIMEOUT', 1800); // 30분

// 파일 업로드 설정
define('MAX_UPLOAD_SIZE', 5 * 1024 * 1024); // 5MB
define('ALLOWED_EXTENSIONS', ['jpg', 'jpeg', 'png', 'gif', 'pdf', 'doc', 'docx', 'hwp']);
define('UPLOAD_PATH', 'uploads/');

// 페이지네이션 설정
define('POSTS_PER_PAGE', 10);
define('PAGINATION_RANGE', 5);

// 테이블 접두사 (자동 감지된 값)
define('TABLE_PREFIX', '{table_prefix}');

// 유틸리티 함수들
function clean_input($data) {
    return htmlspecialchars(strip_tags(trim($data)), ENT_QUOTES, 'UTF-8');
}

function generate_csrf_token() {
    if (!isset($_SESSION)) {
        session_start();
    }
    return $_SESSION[CSRF_TOKEN_NAME] = bin2hex(random_bytes(32));
}

function verify_csrf_token($token) {
    if (!isset($_SESSION)) {
        session_start();
    }
    return isset($_SESSION[CSRF_TOKEN_NAME]) && hash_equals($_SESSION[CSRF_TOKEN_NAME], $token);
}

function format_date($date_string, $format = 'Y-m-d H:i') {
    return date($format, strtotime($date_string));
}

function format_file_size($bytes) {
    $units = ['B', 'KB', 'MB', 'GB'];
    $bytes = max($bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);
    $bytes /= (1 << (10 * $pow));
    return round($bytes, 2) . ' ' . $units[$pow];
}

function get_client_ip() {
    $ip_keys = ['HTTP_X_FORWARDED_FOR', 'HTTP_X_REAL_IP', 'HTTP_CLIENT_IP', 'REMOTE_ADDR'];
    foreach ($ip_keys as $key) {
        if (!empty($_SERVER[$key])) {
            $ips = explode(',', $_SERVER[$key]);
            $ip = trim($ips[0]);
            if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) {
                return $ip;
            }
        }
    }
    return $_SERVER['REMOTE_ADDR'] ?? 'unknown';
}

function redirect($url, $status_code = 302) {
    header("Location: $url", true, $status_code);
    exit;
}

function set_flash_message($type, $message) {
    if (!isset($_SESSION)) {
        session_start();
    }
    $_SESSION['flash_message'] = [
        'type' => $type,
        'message' => $message
    ];
}

function get_flash_message() {
    if (!isset($_SESSION)) {
        session_start();
    }
    if (isset($_SESSION['flash_message'])) {
        $message = $_SESSION['flash_message'];
        unset($_SESSION['flash_message']);
        return $message;
    }
    return null;
}

function is_ajax_request() {
    return !empty($_SERVER['HTTP_X_REQUESTED_WITH']) && 
           strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) === 'xmlhttprequest';
}

function validate_file_upload($file, $allowed_types = null, $max_size = null) {
    if (!isset($file['error']) || is_array($file['error'])) {
        return ['valid' => false, 'message' => '잘못된 파일 업로드입니다.'];
    }
    
    if ($file['error'] !== UPLOAD_ERR_OK) {
        $error_messages = [
            UPLOAD_ERR_INI_SIZE => '파일이 너무 큽니다.',
            UPLOAD_ERR_FORM_SIZE => '파일이 너무 큽니다.',
            UPLOAD_ERR_PARTIAL => '파일이 부분적으로만 업로드되었습니다.',
            UPLOAD_ERR_NO_FILE => '파일이 업로드되지 않았습니다.',
            UPLOAD_ERR_NO_TMP_DIR => '임시 디렉토리가 없습니다.',
            UPLOAD_ERR_CANT_WRITE => '파일 쓰기에 실패했습니다.',
        ];
        return ['valid' => false, 'message' => $error_messages[$file['error']] ?? '업로드 오류가 발생했습니다.'];
    }
    
    $max_size = $max_size ?: MAX_UPLOAD_SIZE;
    if ($file['size'] > $max_size) {
        return ['valid' => false, 'message' => '파일 크기가 ' . format_file_size($max_size) . '를 초과합니다.'];
    }
    
    $allowed_types = $allowed_types ?: ALLOWED_EXTENSIONS;
    $file_extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));
    if (!in_array($file_extension, $allowed_types)) {
        return ['valid' => false, 'message' => '허용되지 않는 파일 형식입니다.'];
    }
    
    // 실제 MIME 타입 검사
    $finfo = finfo_open(FILEINFO_MIME_TYPE);
    $mime_type = finfo_file($finfo, $file['tmp_name']);
    finfo_close($finfo);
    
    $allowed_mimes = [
        'jpg' => 'image/jpeg',
        'jpeg' => 'image/jpeg',
        'png' => 'image/png',
        'gif' => 'image/gif',
        'pdf' => 'application/pdf',
        'doc' => 'application/msword',
        'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'hwp' => 'application/haansofthwp'
    ];
    
    if (isset($allowed_mimes[$file_extension]) && $mime_type !== $allowed_mimes[$file_extension]) {
        return ['valid' => false, 'message' => '파일 내용이 확장자와 일치하지 않습니다.'];
    }
    
    return ['valid' => true, 'message' => '파일이 유효합니다.'];
}

// 세션 시작
if (session_status() === PHP_SESSION_NONE) {
    session_start();
    
    // 세션 타임아웃 검사
    if (isset($_SESSION['last_activity']) && 
        (time() - $_SESSION['last_activity'] > SESSION_TIMEOUT)) {
        session_unset();
        session_destroy();
        session_start();
    }
    $_SESSION['last_activity'] = time();
}

// 글로벌 변수 설정
$GLOBALS['pdo'] = $pdo;
$GLOBALS['config'] = [
    'site_name' => SITE_NAME,
    'site_description' => SITE_DESCRIPTION,
    'debug_mode' => DEBUG_MODE,
    'table_prefix' => TABLE_PREFIX
];

// includes 디렉토리가 있다면 헤더/푸터 파일 자동 로드 준비
$includes_dir = __DIR__ . '/includes';
if (!is_dir($includes_dir)) {
    mkdir($includes_dir, 0755, true);
}

// 자동 로딩 함수 (필요시 사용)
function autoload_include($filename) {
    $file_path = __DIR__ . '/includes/' . $filename;
    if (file_exists($file_path)) {
        include_once $file_path;
        return true;
    }
    return false;
}

// 로그 기록 함수
function log_activity($action, $details = null) {
    if (!DEBUG_MODE) return;
    
    $log_entry = [
        'timestamp' => date('Y-m-d H:i:s'),
        'ip' => get_client_ip(),
        'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? '',
        'action' => $action,
        'details' => $details
    ];
    
    $log_dir = __DIR__ . '/logs';
    if (!is_dir($log_dir)) {
        mkdir($log_dir, 0755, true);
    }
    
    $log_file = $log_dir . '/activity_' . date('Y-m-d') . '.log';
    file_put_contents($log_file, json_encode($log_entry) . "\n", FILE_APPEND | LOCK_EX);
}

// 오류 핸들러 설정
set_error_handler(function($severity, $message, $file, $line) {
    if (!(error_reporting() & $severity)) {
        return false;
    }
    
    $error_info = [
        'severity' => $severity,
        'message' => $message,
        'file' => $file,
        'line' => $line,
        'timestamp' => date('Y-m-d H:i:s')
    ];
    
    if (DEBUG_MODE) {
        echo "<div class='alert alert-danger'>";
        echo "<strong>Error:</strong> $message in $file on line $line";
        echo "</div>";
    }
    
    log_activity('error', $error_info);
    return true;
});

// 예외 핸들러 설정
set_exception_handler(function($exception) {
    $error_info = [
        'message' => $exception->getMessage(),
        'file' => $exception->getFile(),
        'line' => $exception->getLine(),
        'trace' => $exception->getTraceAsString(),
        'timestamp' => date('Y-m-d H:i:s')
    ];
    
    if (DEBUG_MODE) {
        echo "<div class='alert alert-danger'>";
        echo "<strong>Exception:</strong> " . $exception->getMessage();
        echo "<br><small>File: " . $exception->getFile() . " Line: " . $exception->getLine() . "</small>";
        echo "</div>";
    } else {
        echo "<div class='alert alert-danger'>시스템 오류가 발생했습니다. 관리자에게 문의하세요.</div>";
    }
    
    log_activity('exception', $error_info);
});

// 성능 모니터링 (개발 모드에서만)
if (DEBUG_MODE) {
    $GLOBALS['start_time'] = microtime(true);
    $GLOBALS['start_memory'] = memory_get_usage();
    
    register_shutdown_function(function() {
        $execution_time = microtime(true) - $GLOBALS['start_time'];
        $memory_usage = memory_get_usage() - $GLOBALS['start_memory'];
        $peak_memory = memory_get_peak_usage(true);
        
        echo "<!-- Performance Info: ";
        echo "Execution Time: " . round($execution_time * 1000, 2) . "ms, ";
        echo "Memory Used: " . format_file_size($memory_usage) . ", ";
        echo "Peak Memory: " . format_file_size($peak_memory);
        echo " -->";
    });
}
?>