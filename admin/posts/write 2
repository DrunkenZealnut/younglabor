<?php
include '../auth.php'; // 관리자 인증 확인
require_once '../db.php'; // DB 연결
require_once 'processContentImages.php'; // 이미지 처리 유틸리티 함수

// 관리자 사용자 이름 가져오기
$admin_username = $_SESSION['admin_username'] ?? '관리자';

// 게시판 목록 가져오기 (캘린더 타입 제외) - prepared statement 사용
$stmt = $pdo->prepare("SELECT id, board_name, write_level FROM hopec_boards WHERE board_type != ? ORDER BY board_name ASC");
$stmt->execute(['calendar']);
$boards = $stmt->fetchAll(PDO::FETCH_ASSOC);

// 환경변수 로더 포함
require_once __DIR__ . '/../../includes/env_loader.php';

// 페이스북 API 정보 (환경 변수에서 로드)
$fb_app_id = env('FACEBOOK_APP_ID', '2167678457006984');
$fb_app_secret = env('FACEBOOK_APP_SECRET', '15be077b027bd3ed138f7230b5d389bd');
$fb_page_id = env('FACEBOOK_PAGE_ID', '1465916713640208');
$fb_access_token = env('FACEBOOK_ACCESS_TOKEN', 'EAAezffhqy4gBO04HX7RghZCWNcYhCS6DoPS4YbiZACxUGhEWVtfZBzi0VQo4dQFUKzCYzZCXmw7ZCicW0zdviAAILRWLPasCL8SHJZC7rFYNGxTbNWnj1ZCZA0L3pvLTWuZAxt9eaeotmL2iKeYnsoTEVFuWX2XbmUhOEdRFlfKCCeDZChdAb3sDqe3gpnqjIZC');

// 게시글 저장 처리
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // 폼 데이터 가져오기
    $board_id = (int)$_POST['board_id'];
    $category_id = isset($_POST['category_id']) ? (int)$_POST['category_id'] : NULL;
    $title = trim($_POST['title']);
    
    // HTML 콘텐츠 기본 검증 및 정리
    $content = $_POST['content'];
    // 기본적인 XSS 방지: 위험한 스크립트 태그 제거
    $content = preg_replace('/<script[^>]*?>.*?<\/script>/is', '', $content);
    $content = preg_replace('/javascript:/i', '', $content);
    $content = preg_replace('/on\w+\s*=/i', '', $content); // onclick, onload 등 이벤트 핸들러 제거
    
    $author = trim($_POST['author']);
    $is_notice = isset($_POST['is_notice']) ? 1 : 0;
    $is_published = isset($_POST['is_published']) ? 1 : 0;
    $post_to_facebook = isset($_POST['post_to_facebook']) ? 1 : 0;
    
    // 폼 유효성 검사
    $errors = [];
    
    if (empty($board_id)) {
        $errors[] = "게시판을 선택해주세요.";
    }
    
    if (empty($title)) {
        $errors[] = "제목을 입력해주세요.";
    }
    
    // 본문 필수 입력 조건 제거
    // if (empty($content)) {
    //     $errors[] = "내용을 입력해주세요.";
    // }
    
    if (empty($author)) {
        $errors[] = "작성자를 입력해주세요.";
    }
    
    // 썸네일 이미지 처리
    $thumbnail = null;
    if (!empty($_FILES['thumbnail']['name'])) {
        // 연도/월 폴더 구조 생성
        $date = new DateTime();
        $year = $date->format('Y');
        $month = $date->format('m');
        $upload_dir = "../../uploads/posts/$year/$month/";
        
        // 디렉토리가 존재하지 않으면 생성
        if (!is_dir($upload_dir)) {
            mkdir($upload_dir, 0755, true);
        }
        
        // 파일명 생성 - 날짜 시간 형식과 고유 ID 조합
        $date_str = date('YmdHis'); // 년월일시분초 형식
        $file_ext = strtolower(pathinfo($_FILES['thumbnail']['name'], PATHINFO_EXTENSION));
        $unique_id = uniqid();
        $thumbnail_name = "{$date_str}_{$unique_id}.{$file_ext}";
        $thumbnail_path = $upload_dir . $thumbnail_name;
        
        // 이미지 타입 확인 (확장자 + MIME 타입 검증)
        $allowed_extensions = ['jpg', 'jpeg', 'png', 'gif'];
        $allowed_mime_types = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
        
        // 확장자 검증
        if (!in_array($file_ext, $allowed_extensions)) {
            $errors[] = "썸네일은 JPG, JPEG, PNG, GIF 파일만 업로드 가능합니다.";
        } else {
            // MIME 타입 검증 (보안 강화)
            $finfo = new finfo(FILEINFO_MIME_TYPE);
            $detected_mime = $finfo->file($_FILES['thumbnail']['tmp_name']);
            
            if (!in_array($detected_mime, $allowed_mime_types)) {
                $errors[] = "업로드된 파일이 실제 이미지 파일이 아닙니다. (감지된 타입: " . $detected_mime . ")";
            } else {
                // 파일 업로드
                if (move_uploaded_file($_FILES['thumbnail']['tmp_name'], $thumbnail_path)) {
                    $thumbnail = "uploads/posts/$year/$month/" . $thumbnail_name;
                } else {
                    $errors[] = "썸네일 업로드에 실패했습니다.";
                }
            }
        }
    } else {
        // 썸네일이 없는 경우 사이트 로고를 기본 이미지로 사용
        // 사이트 설정에서 로고 정보 가져오기 - prepared statement 사용
        $settings_stmt = $pdo->prepare("SELECT setting_value FROM hopec_site_settings WHERE setting_key = ?");
        $settings_stmt->execute(['site_logo']);
        $logo_setting = $settings_stmt->fetch(PDO::FETCH_ASSOC);
        
        // 로고가 있으면 해당 로고를 썸네일로 사용
        if ($logo_setting && !empty($logo_setting['setting_value'])) {
            // 경로가 이미 'uploads/'로 시작하는지 확인하고, 경로 중복을 방지합니다
            $logo_path = $logo_setting['setting_value'];
            $thumbnail = $logo_path; // 로고 경로를 그대로 사용 (이미 'uploads/settings/'로 시작함)
        }
    }
    
    // 오류가 없으면 게시글 저장
    if (empty($errors)) {
        try {
            $stmt = $pdo->prepare("
                INSERT INTO hopec_posts 
                (board_id, category_id, title, content, author, is_notice, is_published, thumbnail, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW())
            ");
            
            $result = $stmt->execute([
                $board_id, $category_id, $title, $content, $author, $is_notice, $is_published, $thumbnail
            ]);
            
            if ($result) {
                $post_id = $pdo->lastInsertId();
                
                // 콘텐츠에서 임시 이미지를 실제 DB에 연결
                $content = processContentImages($content, $post_id, $pdo);
                
                // 콘텐츠 업데이트 (이미지 경로가 수정되었을 수 있음)
                $update_stmt = $pdo->prepare("UPDATE hopec_posts SET content = ? WHERE id = ?");
                $update_stmt->execute([$content, $post_id]);
                
                // 본문에 이미지가 있으면서 썸네일이 사이트 로고인 경우 첫 번째 이미지를 썸네일로 설정
                $thumbnail_updated = updateThumbnailFromContent($content, $post_id, $thumbnail, $pdo);
                
                // 썸네일 업데이트가 실패했고(본문에 이미지가 없고), 썸네일도 없는 경우
                // 항상 사이트 로고를 기본 이미지로 사용
                if (!$thumbnail_updated && empty($thumbnail)) {
                    $settings_stmt = $pdo->prepare("SELECT setting_value FROM hopec_site_settings WHERE setting_key = ?");
                    $settings_stmt->execute(['site_logo']);
                    $logo_setting = $settings_stmt->fetch(PDO::FETCH_ASSOC);
                    
                    if ($logo_setting && !empty($logo_setting['setting_value'])) {
                        $logo_path = $logo_setting['setting_value'];
                        $thumbnail = $logo_path;
                        
                        // 썸네일 업데이트
                        $update_thumb_stmt = $pdo->prepare("UPDATE hopec_posts SET thumbnail = ? WHERE id = ?");
                        $update_thumb_stmt->execute([$thumbnail, $post_id]);
                    }
                }
                
                // 첨부파일 처리
                if (isset($_POST['allow_attachments']) && $_POST['allow_attachments'] === 'true' && !empty($_FILES['attachments']['name'][0])) {
                    // 연도/월 폴더 구조 생성
                    $date = new DateTime();
                    $year = $date->format('Y');
                    $month = $date->format('m');
                    $uploads_dir = "../../uploads/posts/$year/$month";
                    
                    // 디렉토리가 없는 경우 생성
                    if (!is_dir($uploads_dir)) {
                        mkdir($uploads_dir, 0755, true);
                    }
                    
                    $file_count = count($_FILES['attachments']['name']);
                    
                    for ($i = 0; $i < $file_count; $i++) {
                        if ($_FILES['attachments']['error'][$i] === UPLOAD_ERR_OK) {
                            $tmp_name = $_FILES['attachments']['tmp_name'][$i];
                            $name = $_FILES['attachments']['name'][$i];
                            $file_size = $_FILES['attachments']['size'][$i];
                            $file_type = $_FILES['attachments']['type'][$i];
                            
                            // 파일명 안전하게 처리 및 postID 포함
                            $file_ext = strtolower(pathinfo($name, PATHINFO_EXTENSION));
                            $date_str = date('YmdHis'); // 년월일시분초 형식
                            $unique_id = uniqid();
                            $safe_filename = "{$date_str}_{$unique_id}.{$file_ext}";
                            
                            // 파일 저장
                            $dest_path = $uploads_dir . '/' . $safe_filename;
                            
                            if (move_uploaded_file($tmp_name, $dest_path)) {
                                // DB에 첨부파일 정보 저장
                                $file_stmt = $pdo->prepare("
                                    INSERT INTO hopec_post_attachments 
                                    (post_id, file_name, file_path, file_size, file_type)
                                    VALUES (?, ?, ?, ?, ?)
                                ");
                                
                                $file_path = "uploads/posts/$year/$month/" . $safe_filename;
                                $file_stmt->execute([$post_id, $name, $file_path, $file_size, $file_type]);
                            } else {
                            }
                        }
                    }
                }
                
                // 페이스북 페이지에 업로드
                if ($post_to_facebook) {
                    // 이미지 URL 추출
                    preg_match_all('/<img[^>]+src="([^"]+)"[^>]*>/i', $content, $matches);
                    $image_urls = [];
                    
                    if (isset($matches[1])) {
                        foreach ($matches[1] as $img_url) {
                            // 서버에 있는 이미지 URL을 완전한 URL로 변환
                            if (strpos($img_url, 'http') === 0) {
                                // 이미 HTTP로 시작하는 URL은 그대로 사용
                                $image_urls[] = $img_url;
                            } else {
                                // 상대 경로 이미지는 전체 도메인을 포함한 URL로 변환
                                $full_url = 'http://' . $_SERVER['HTTP_HOST'] . '/' . ltrim(str_replace('../../', '', $img_url), '/');
                                $image_urls[] = $full_url;
                            }
                        }
                    }
                    
                    // 페이스북에 게시물 업로드
                    $message = $title . "\n\n" . strip_tags($content);
                    
                    // 디버깅 정보 파일에 기록
                    $log_file = '../logs/facebook_upload_log.txt';
                    $log_data = date('Y-m-d H:i:s') . " - 게시글 ID: " . $post_id . "\n";
                    $log_data .= "제목: " . $title . "\n";
                    $log_data .= "이미지 URL 수: " . count($image_urls) . "\n";
                    
                    if (!empty($image_urls)) {
                        $log_data .= "첫번째 이미지 URL: " . $image_urls[0] . "\n";
                        
                        // 이미지 파일을 직접 업로드하는 방식으로 변경
                        $img_url = $image_urls[0];
                        
                        // 상대경로를 서버 절대경로로 변환
                        $server_path = '';
                        if (strpos($img_url, 'http') === 0) {
                            // URL에서 파일경로 추출
                            $parsed_url = parse_url($img_url);
                            $relative_path = $parsed_url['path'];
                            $server_path = $_SERVER['DOCUMENT_ROOT'] . $relative_path;
                        } else {
                            // 상대경로를 절대경로로 변환
                            $server_path = $_SERVER['DOCUMENT_ROOT'] . '/' . ltrim(str_replace('../../', '', $img_url), '/');
                        }
                        
                        $log_data .= "서버 경로: " . $server_path . "\n";
                        
                        // 파일이 존재하는지 확인
                        if (file_exists($server_path)) {
                            $log_data .= "파일 존재함\n";
                            
                            // 페이스북에 직접 파일 업로드
                            $url = "https://graph.facebook.com/v18.0/{$fb_page_id}/photos";
                            
                            // cURL로 멀티파트 폼 데이터 업로드
                            $data = [
                                'message' => $message,
                                'access_token' => $fb_access_token,
                                'source' => new CURLFile($server_path)
                            ];
                            
                            $ch = curl_init();
                            curl_setopt($ch, CURLOPT_URL, $url);
                            curl_setopt($ch, CURLOPT_POST, 1);
                            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
                            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                            $response = curl_exec($ch);
                            $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                            curl_close($ch);
                        } else {
                            $log_data .= "파일이 존재하지 않음\n";
                            
                            // 이미지 파일을 찾을 수 없는 경우, 텍스트만 업로드
                            $url = "https://graph.facebook.com/v18.0/{$fb_page_id}/feed";
                            $data = [
                                'message' => $message,
                                'access_token' => $fb_access_token
                            ];
                            
                            $ch = curl_init();
                            curl_setopt($ch, CURLOPT_URL, $url);
                            curl_setopt($ch, CURLOPT_POST, 1);
                            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
                            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                            $response = curl_exec($ch);
                            $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                            curl_close($ch);
                        }
                        
                        // 응답 로깅
                        $log_data .= "API 호출 결과 (photos): HTTP " . $http_code . "\n";
                        $log_data .= "응답: " . $response . "\n";
                    } else {
                        $log_data .= "이미지 없음, 텍스트만 업로드\n";
                        
                        // 이미지가 없는 경우 일반 게시물로 업로드
                        $url = "https://graph.facebook.com/v18.0/{$fb_page_id}/feed";
                        $data = [
                            'message' => $message,
                            'access_token' => $fb_access_token
                        ];
                        
                        $ch = curl_init();
                        curl_setopt($ch, CURLOPT_URL, $url);
                        curl_setopt($ch, CURLOPT_POST, 1);
                        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                        $response = curl_exec($ch);
                        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                        curl_close($ch);
                        
                        // 응답 로깅
                        $log_data .= "API 호출 결과 (feed): HTTP " . $http_code . "\n";
                        $log_data .= "응답: " . $response . "\n";
                    }
                    
                    // 로그 저장
                    if (!is_dir('../logs')) {
                        mkdir('../logs', 0755, true);
                    }
                    file_put_contents($log_file, $log_data . "\n---\n", FILE_APPEND);
                }
                
                // 성공 메시지 및 리디렉션
                $_SESSION['success_message'] = "게시글이 성공적으로 저장되었습니다.";
                header("Location: list.php");
                exit;
            }
        } catch (PDOException $e) {
            $errors[] = "게시글 저장 중 오류가 발생했습니다: " . $e->getMessage();
        }
    }
}


?>

<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <title>새 게시글 작성 - 관리자</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Bootstrap -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
  <!-- Summernote CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/summernote@0.8.20/dist/summernote-lite.min.css">
  
  <!-- Enhanced Editor CSS -->
  <link rel="stylesheet" href="../../board_templates/css/editor-enhancements.css">
  
  <style>
    body {
      min-height: 100vh;
      display: flex;
      font-family: 'Segoe UI', sans-serif;
    }
    .sidebar {
      width: 220px;
      background-color: #343a40;
      color: white;
      min-height: 100vh;
    }
    .sidebar a {
      color: white;
      padding: 12px 16px;
      display: block;
      text-decoration: none;
    }
    .sidebar a:hover {
      background-color: #495057;
    }
    .main-content {
      flex-grow: 1;
      padding: 30px;
      background-color: #f8f9fa;
    }
    .sidebar .logo {
      font-weight: bold;
      font-size: 1.3rem;
      padding: 16px;
      border-bottom: 1px solid #495057;
    }
    
    /* 메인 페이지와 동일한 에디터 스타일 */
    .note-editor {
      border-radius: 5px;
      overflow: hidden;
      border: 2px solid #0d6efd !important;
      margin-bottom: 0;
    }
    
    .note-editor .note-editable {
      background-color: #fff;
      min-height: 400px;
    }
    
    .note-toolbar {
      background-color: #f8f9fa;
    }
    
    .note-editor .note-toolbar .note-btn {
      background-color: #fff;
      border-color: #ced4da;
    }
    
    .note-editor .note-toolbar .note-btn:hover {
      background-color: #e9ecef;
    }
    
    /* 이미지 삽입 모달 스타일 */
    .note-modal {
      position: fixed !important;
      top: 50% !important;
      left: 50% !important;
      transform: translate(-50%, -50%) !important;
      z-index: 9999 !important;
      width: auto !important;
      max-width: 90% !important;
      min-width: 350px !important;
      height: auto !important;
    }
    
    .note-modal-content {
      border-radius: 8px !important;
      overflow: hidden !important;
      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15) !important;
      border: none !important;
      width: 100% !important;
      height: auto !important;
    }
    
    .note-modal-header {
      background-color: #f8f9fa !important;
      border-bottom: 1px solid #dee2e6 !important;
      padding: 15px !important;
    }
    
    .note-modal-title {
      font-weight: bold !important;
      color: #212529 !important;
      font-size: 18px !important;
    }
    
    .note-modal-body {
      padding: 20px !important;
      background-color: #ffffff !important;
      max-height: 70vh !important;
      overflow-y: auto !important;
    }
    
    .note-modal-footer {
      background-color: #f8f9fa !important;
      border-top: 1px solid #dee2e6 !important;
      padding: 15px !important;
      display: flex !important;
      justify-content: center !important;
      position: relative !important;
      width: 100% !important;
      min-height: 60px !important;
    }
    
    .note-modal-footer .btn {
      margin: 0 5px !important;
      padding: 8px 16px !important;
      border-radius: 4px !important;
      font-weight: 500 !important;
      white-space: nowrap !important;
      min-width: 80px !important;
    }
    
    .note-modal-footer .btn-primary {
      background-color: #0d6efd !important;
      border-color: #0d6efd !important;
      color: #fff !important;
    }
    
    /* URL 입력 필드 강화 */
    .note-image-url {
      width: 100% !important;
      padding: 12px !important;
      border: 2px solid #80bdff !important;
      border-radius: 4px !important;
      background-color: #fff !important;
      font-size: 14px !important;
      height: auto !important;
      box-shadow: 0 0 8px rgba(0, 123, 255, 0.15) !important;
      margin: 10px 0 5px 0 !important;
    }
    
    .note-group-image-url {
      background-color: #f0f7ff !important;
      padding: 15px !important;
      border-radius: 4px !important;
      border: 1px solid #b8daff !important;
      margin-bottom: 10px !important;
    }
    
    .note-group-image-url label {
      font-size: 15px !important;
      color: #212529 !important;
      font-weight: bold !important;
      margin-bottom: 10px !important;
      display: block !important;
      border-bottom: 1px solid #dee2e6 !important;
      padding-bottom: 8px !important;
    }
    
    .note-group-select-from-files {
      background-color: #f5f5f5 !important;
      padding: 15px !important;
      border-radius: 4px !important;
      border: 1px solid #e0e0e0 !important;
      margin: 15px 0 !important;
    }
    
    .note-modal-backdrop {
      position: fixed !important;
      top: 0 !important;
      left: 0 !important;
      right: 0 !important;
      bottom: 0 !important;
      z-index: 9998 !important;
      background-color: rgba(0, 0, 0, 0.5) !important;
    }
    
    /* 모바일에서 모달 크기 최적화 */
    @media (max-width: 576px) {
      .note-modal {
        width: 95% !important;
        min-width: 300px !important;
        height: auto !important;
      }
      
      .note-modal-body {
        padding: 15px !important;
        max-height: 62vh !important;
      }
      
      .note-modal-footer {
        padding: 10px !important;
        min-height: 50px !important;
      }
      
      .note-modal-footer .btn {
        padding: 6px 12px !important;
        font-size: 14px !important;
        min-width: 70px !important;
      }
    }
    
    .thumbnail-preview {
      max-width: 150px;
      max-height: 150px;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

<!-- 사이드바 -->
<div class="sidebar">
  <div class="logo">우동615 관리자</div>
  <a href="../index.php">📊 대시보드</a>
  <a href="list.php" class="active" style="background-color: #495057;">📝 게시글 관리</a>
  <a href="../boards/list.php">📋 게시판 관리</a>
  <a href="../menu/list.php">🧭 메뉴 관리</a>
  <a href="../inquiries/list.php">📬 문의 관리</a>
  <a href="../events/list.php">📅 행사 관리</a>
  <a href="../files/list.php">📂 자료실</a>
  <a href="../settings/site_settings.php">🎨 디자인 설정</a>
  <a href="../logout.php">🚪 로그아웃</a>
</div>

<!-- 본문 -->
<div class="main-content">
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="../index.php">대시보드</a></li>
      <li class="breadcrumb-item"><a href="list.php">게시글 관리</a></li>
      <li class="breadcrumb-item active" aria-current="page">새 게시글 작성</li>
    </ol>
  </nav>

  <div class="d-flex justify-content-between align-items-center mb-4">
    <h2>새 게시글 작성</h2>
    <a href="list.php" class="btn btn-outline-secondary">
      <i class="bi bi-arrow-left"></i> 목록으로
    </a>
  </div>
  
  <!-- 오류 메시지 표시 -->
  <?php if (!empty($errors)): ?>
    <div class="alert alert-danger">
      <ul class="mb-0">
        <?php foreach ($errors as $error): ?>
          <li><?= $error ?></li>
        <?php endforeach; ?>
      </ul>
    </div>
  <?php endif; ?>
  
  <!-- 게시글 작성 폼 -->
  <div class="card">
    <div class="card-body">
      <form method="post" enctype="multipart/form-data">
        <div class="row mb-3">
          <div class="col-md-6">
            <label for="board_id" class="form-label">게시판 선택</label>
            <select class="form-select" id="board_id" name="board_id" required>
              <option value="">-- 게시판 선택 --</option>
              <?php foreach ($boards as $board): ?>
                <option value="<?= $board['id'] ?>"><?= htmlspecialchars($board['board_name']) ?></option>
              <?php endforeach; ?>
            </select>
          </div>
          <div class="col-md-6">
            <label for="author" class="form-label">작성자</label>
            <input type="text" class="form-control" id="author" name="author" value="<?= htmlspecialchars($admin_username) ?>" required>
          </div>
        </div>
        
        <div id="category_container" class="mb-3 d-none">
          <label for="category_id" class="form-label">카테고리</label>
          <select class="form-select" id="category_id" name="category_id">
            <option value="">-- 카테고리 선택 --</option>
          </select>
        </div>
        
        <div class="mb-3">
          <label for="title" class="form-label">제목</label>
          <input type="text" class="form-control" id="title" name="title" required>
        </div>
        
        <div class="mb-3">
          <label for="content" class="form-label">내용</label>
          <textarea id="summernote" name="content" class="summernote"></textarea>
        </div>
        
        <div class="mb-3">
          <label for="thumbnail" class="form-label">썸네일 이미지</label>
          <input type="file" class="form-control" id="thumbnail" name="thumbnail" accept="image/*">
          <div class="form-text">썸네일로 사용할 이미지를 선택하세요. (선택사항)</div>
        </div>
        
        <!-- 첨부파일 영역 (게시판 설정에 따라 표시) -->
        <div class="mb-3" id="attachments_container" style="display: block;">
          <label for="attachments" class="form-label">첨부파일</label>
          <input type="file" class="form-control" id="attachments" name="attachments[]" multiple>
          <div class="form-text">
            첨부할 파일을 선택하세요. 여러 파일을 한번에 선택할 수 있습니다. (선택사항)<br>
            첨부 가능한 파일: 문서(pdf, doc, docx, hwp, txt), 이미지(jpg, jpeg, png, gif), 압축파일(zip, rar) / 최대 10MB
          </div>
          <input type="hidden" name="allow_attachments" id="allow_attachments" value="true">
        </div>
        
        <div class="form-check mb-3">
          <input class="form-check-input" type="checkbox" id="is_notice" name="is_notice">
          <label class="form-check-label" for="is_notice">
            공지사항으로 등록
          </label>
        </div>
        
        <div class="form-check mb-3">
          <input class="form-check-input" type="checkbox" id="is_published" name="is_published" checked>
          <label class="form-check-label" for="is_published">
            바로 발행하기 (체크 해제시 임시저장)
          </label>
        </div>
        
        <div class="form-check mb-3" id="facebook_post_container" style="display: none;">
          <input class="form-check-input" type="checkbox" id="post_to_facebook" name="post_to_facebook">
          <label class="form-check-label" for="post_to_facebook">
            페이스북 페이지에도 업로드하기
          </label>
        </div>
        
        <div class="d-flex justify-content-end">
          <button type="button" class="btn btn-light me-2" id="cancel-btn">취소</button>
          <button type="submit" class="btn btn-primary">저장</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- 기본 모달 (스크립트에서 동적으로 대체됨) -->
<div id="modalContainer"></div>

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Bootstrap JS Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<!-- Summernote JS -->
<script src="https://cdn.jsdelivr.net/npm/summernote@0.8.20/dist/summernote-lite.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/summernote@0.8.20/dist/lang/summernote-ko-KR.min.js"></script>

<!-- Enhanced Editor Plugins (성능 최적화: 필수 플러그인만 로드) -->
<script>
// 핵심 플러그인만 비동기 로드
const corePlugins = [
  '../../board_templates/js/summernote-plugins/core/plugin-loader.js',
  '../../board_templates/js/summernote-plugins/core/plugin-base.js',
  '../../board_templates/js/summernote-plugins/text-styles/strikethrough.js',
  '../../board_templates/js/summernote-plugins/text-styles/superscript.js',
  '../../board_templates/js/summernote-plugins/text-styles/subscript.js',
  '../../board_templates/js/summernote-plugins/paragraph/paragraph-styles.js?v=9.0',
  '../../board_templates/js/summernote-plugins/content/checklist.js?v=6.2',
  '../../board_templates/js/summernote-plugins/table/table-simple.js?v=6.2',
  '../../board_templates/js/summernote-plugins/special/blockquote.js?v=9.0'
];

// 플러그인 순차적 로드
let loadIndex = 0;
function loadNextPlugin() {
  if (loadIndex < corePlugins.length) {
    const script = document.createElement('script');
    script.src = corePlugins[loadIndex];
    script.onload = () => {
      loadIndex++;
      loadNextPlugin();
    };
    document.head.appendChild(script);
  }
}
// DOM 로드 후 플러그인 로드 시작
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', loadNextPlugin);
} else {
  loadNextPlugin();
}
</script>

<!-- LinkPreviewClient (지연 로드) -->
<script>
setTimeout(() => {
  const script = document.createElement('script');
  script.src = '../../board_templates/LinkPreviewClient.js';
  document.head.appendChild(script);
}, 1000);
</script>
<script>
  $(document).ready(function() {
    // 페이지 로드 시 첨부파일 영역 상태 확인
    
    // 썸머노트 에디터 초기화 (메인 페이지와 동일)
    $('#summernote').summernote({
      height: 400,
      minHeight: 200,
      maxHeight: 600,
      lang: 'ko-KR',
      placeholder: '내용을 입력하세요...',
      styleTags: [
        'p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'
      ],
      styleWithSpan: false,
      popover: {
        style: [
          ['style', ['style']]
        ]
      },
      toolbar: [
        // 텍스트 스타일 그룹 (네이버: 본문, 나눔고딕, 15)
        ['textFormat', ['style', 'fontname', 'fontsize']],
        
        // 텍스트 효과 그룹 (네이버: B, I, U, 취소선, 위첨자, 아래첨자)
        ['textStyle', ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript']],
        
        // 색상 그룹 (네이버: 글자색)
        ['color', ['forecolor', 'backcolor', 'highlighter']],
        
        // 정렬 및 목록 그룹 (네이버: 정렬, 목록)
        ['paragraph', ['ul', 'ol', 'paragraph', 'lineHeight']],
        
        // 특수 스타일 그룹 (인용구, 코드 등)
        ['special', ['blockquote', 'codeblock']],
        
        // 콘텐츠 삽입 그룹 (네이버: 표, 첨부 등)
        ['insert', ['table', 'checklist', 'divider', 'link', 'picture']],
        
        // 뷰 컨트롤 그룹
        ['view', ['fullscreen', 'codeview', 'clear', 'help']]
      ],
      callbacks: {
        // 초기화 완료 후 인용구 내부에서 다른 기능 사용 시 외부 삽입 처리
        onInit: function() {
          var $editable = $(this);
          
          // 인용구 내부 클릭 감지
          $editable.on('click', function(e) {
            var $target = $(e.target);
            var $quote = $target.closest('blockquote, .blockquote-bubble, .blockquote-quote, .blockquote-box');
            
            if ($quote.length > 0) {
              // 인용구 내부에 있음을 표시
              $editable.data('inside-quote', $quote);
            } else {
              // 인용구 외부
              $editable.removeData('inside-quote');
            }
          });
          
          // 표 버튼 클릭 시 인용구 외부에 삽입
          setTimeout(function() {
            $('.note-toolbar .note-btn').on('click', function() {
              var $insideQuote = $editable.data('inside-quote');
              if ($insideQuote && $insideQuote.length > 0) {
                // 인용구 다음에 커서 이동
                var range = document.createRange();
                var selection = window.getSelection();
                
                // 인용구 다음 위치에 임시 요소 삽입
                var $temp = $('<p><br></p>');
                $insideQuote.after($temp);
                
                // 커서를 임시 요소로 이동
                range.setStart($temp[0], 0);
                range.collapse(true);
                selection.removeAllRanges();
                selection.addRange(range);
                
                // 인용구 내부 상태 초기화
                $editable.removeData('inside-quote');
              }
            });
          }, 1000);
          
          // 스타일 드롭다운에서 인용구 제거
          setTimeout(function() {
            // Summernote 스타일 옵션 커스터마이징
            var $styleDropdown = $('.note-toolbar .note-style .dropdown-menu');
            if ($styleDropdown.length > 0) {
              $styleDropdown.find('a[data-value="blockquote"]').remove();
              $styleDropdown.find('li:contains("Blockquote")').remove();
              $styleDropdown.find('li:contains("인용구")').remove();
            }
          }, 1500);
        },
        
        // 이미지 업로드 콜백
        onImageUpload: function(files) {
          for (let i = 0; i < files.length; i++) {
            uploadImage(files[i], $(this));
          }
        }
      }
    });
    
    // Summernote 초기화 후 기본 표 버튼 기능 수정
    setTimeout(function() {
      const tableBtn = $('.note-toolbar .note-table .note-btn[data-original-title*="Table"], .note-toolbar .note-table .note-btn[title*="Table"], .note-toolbar .note-table .note-btn[data-original-title*="표"], .note-toolbar .note-table .note-btn[title*="표"]').first();
      
      if (tableBtn.length > 0) {
        // 기존 이벤트 제거
        tableBtn.off('click');
        
        // 새로운 클릭 이벤트 추가 (즉시 3x3 테두리 표 삽입)
        tableBtn.on('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          
          const tableHtml = `
            <table style="border-collapse: collapse; width: 100%; margin: 10px 0; border: 1px solid #D1D5DB;">
              <tr>
                <th style="border: 1px solid #D1D5DB; padding: 8px; background-color: #FEF3C7; font-weight: 600;">헤더 1</th>
                <th style="border: 1px solid #D1D5DB; padding: 8px; background-color: #FEF3C7; font-weight: 600;">헤더 2</th>
                <th style="border: 1px solid #D1D5DB; padding: 8px; background-color: #FEF3C7; font-weight: 600;">헤더 3</th>
              </tr>
              <tr>
                <td style="border: 1px solid #D1D5DB; padding: 8px; min-width: 50px;">내용 1-1</td>
                <td style="border: 1px solid #D1D5DB; padding: 8px; min-width: 50px;">내용 1-2</td>
                <td style="border: 1px solid #D1D5DB; padding: 8px; min-width: 50px;">내용 1-3</td>
              </tr>
              <tr>
                <td style="border: 1px solid #D1D5DB; padding: 8px; min-width: 50px;">내용 2-1</td>
                <td style="border: 1px solid #D1D5DB; padding: 8px; min-width: 50px;">내용 2-2</td>
                <td style="border: 1px solid #D1D5DB; padding: 8px; min-width: 50px;">내용 2-3</td>
              </tr>
            </table>
            <p><br></p>
          `;
          $('#summernote').summernote('pasteHTML', tableHtml);
          
          return false;
        });
        
        // 툴팁 업데이트
        tableBtn.attr('title', '표 삽입 (Ctrl+Shift+T)');
        tableBtn.attr('data-original-title', '표 삽입 (Ctrl+Shift+T)');
        
      } else {
      }
    }, 1000);
    
    
    // 이미지 업로드 함수 (메인 페이지와 동일)
    function uploadImage(file, editor) {
      if (!file || !file.type.startsWith('image/')) {
        alert('이미지 파일만 업로드 가능합니다.');
        return;
      }
      
      if (file.size > 5 * 1024 * 1024) { // 5MB
        alert('이미지 크기는 5MB 이하만 가능합니다.');
        return;
      }
      
      const formData = new FormData();
      formData.append('image', file);
      
      // admin 경로에 맞는 업로드 URL 사용
      $.ajax({
        url: 'upload_image.php',
        method: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function(response) {
          try {
            if (typeof response === 'string') {
              response = JSON.parse(response);
            }
            
            if (response.success) {
              let imageUrl = response.url;
              
              // admin 상대 경로 처리
              if (response.urls && response.urls.admin_relative) {
                imageUrl = response.urls.admin_relative;
              } else if (imageUrl.startsWith('uploads/')) {
                imageUrl = '../../' + imageUrl;
              }
              
              editor.summernote('insertImage', imageUrl, function($image) {
                $image.css('max-width', '100%');
              });
            } else {
              alert('이미지 업로드 실패: ' + response.message);
            }
          } catch (e) {
            alert('응답 처리 중 오류가 발생했습니다: ' + e.message);
          }
        },
        error: function(xhr, status, error) {
          alert('이미지 업로드 중 오류가 발생했습니다: ' + error);
        }
      });
    }
    
    // 취소 버튼
    $('#cancel-btn').click(function() {
      if (confirm('작성 중인 내용이 저장되지 않습니다. 정말 취소하시겠습니까?')) {
        window.location.href = 'list.php';
      }
    });
    
    // 게시판 선택 변경 이벤트 직접 연결
    $('#board_id').on('change', function(e) {
      // 이벤트 전파 중지 및 폼 제출 방지
      e.preventDefault();
      e.stopPropagation();
      
      const boardId = $(this).val();
      
      // 게시판 ID가 있는 경우에만 AJAX 요청 실행
      if (boardId) {
        // 페이지 로드 시 첨부파일 영역 상태 확인
        
        $.ajax({
          url: 'get_board_info.php',
          type: 'GET',
          data: { board_id: boardId },
          dataType: 'json',
          success: function(response) {
            // write_level 값 별도 로그
            if (typeof response.write_level !== 'undefined') {
            } else {
            }
            
            // 첨부파일 허용 여부 확인 및 처리
            if (response.allow_attachments == 1) {
              $('#attachments_container').css('display', 'block');
              $('#allow_attachments').val('true');
            } else {
              $('#attachments_container').css('display', 'none');
              $('#allow_attachments').val('false');
            }
            
            // 페이스북 업로드 체크박스 표시 여부 설정
            if (response.write_level == 0) {
              $('#facebook_post_container').show();
            } else {
              $('#facebook_post_container').hide();
              $('#post_to_facebook').prop('checked', false);
            }
            
            // 카테고리 처리
            loadCategories(boardId);
          },
          error: function(xhr, status, error) {
            console.error('게시판 정보 로딩 실패:', error);
            alert('게시판 정보를 가져오는 중 오류가 발생했습니다: ' + error);
          }
        });
      } else {
        // 게시판 선택이 없는 경우 첨부파일 영역 숨김
        $('#attachments_container').css('display', 'none');
        $('#allow_attachments').val('false');
        $('#category_container').addClass('d-none');
        $('#facebook_post_container').hide();
        $('#post_to_facebook').prop('checked', false);
      }
      
      return false;
    });
    
    // 게시판 변경 시 카테고리 목록 로드
    function loadCategories(boardId) {
      if (!boardId) {
        $('#category_container').addClass('d-none');
        return;
      }
      
      $.ajax({
        url: 'get_categories.php',
        type: 'GET',
        data: { board_id: boardId },
        dataType: 'json',
        success: function(response) {
          
          if (response.use_category && response.categories && response.categories.length > 0) {
            // 카테고리 목록 업데이트
            var categorySelect = $('#category_id');
            categorySelect.empty();
            categorySelect.append('<option value="">-- 카테고리 선택 --</option>');
            
            $.each(response.categories, function(index, category) {
              categorySelect.append('<option value="' + category.id + '">' + category.name + '</option>');
            });
            
            $('#category_container').removeClass('d-none');
          } else {
            $('#category_container').addClass('d-none');
          }
        },
        error: function(xhr, status, error) {
          console.error('카테고리 로딩 실패:', error);
          console.error('상태:', status);
          console.error('응답:', xhr.responseText);
          $('#category_container').addClass('d-none');
        }
      });
    }
    
  });
</script>
</body>
</html> 